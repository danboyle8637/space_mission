(()=>{"use strict";var e=[,(e,t,s)=>{function n(){console.log("From Util file...")}s.r(t),s.d(t,{util:()=>n})}],t={};function s(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,s),o.exports}s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{s.r(n);var e=s(1);self.__WB_DISABLE_DEV_LOGS=!0,(0,e.util)();let t;self.addEventListener("install",(e=>{})),self.addEventListener("activate",(()=>{})),self.addEventListener("fetch",(async e=>{const s=e.request.headers,n=new URL(e.request.url);switch(n.pathname){case"/_next/image":if(!(n.toString().includes("mars")||n.toString().includes("titan")||n.toString().includes("astroid-mining-card")||n.toString().includes("black-hole-card")||n.toString().includes("pleiades")))return e.respondWith(fetch(e.request));e.respondWith(caches.open("mission-images").then((t=>t.match(e.request).then((s=>s||fetch(e.request).then((s=>{const n=s.clone();return t.put(e.request,n),s})))))));break;case"/get-user":e.respondWith(caches.open("user-doc").then((t=>t.match(e.request).then((s=>s||fetch(e.request).then((async s=>{const n=s.clone();return t.put(e.request,n),s})))))));break;case"/api/login":e.respondWith(fetch(e.request).then((async e=>{if(e){const t=e.clone(),s=(await t.json()).userDoc;if(!s)return e;{const t=new Response(JSON.stringify(s)),n=new Request("/get-user",{method:"GET"});caches.open("user-doc").then((s=>(s.put(n,t),e))).catch((()=>e))}}return e})));break;case"/activate-mission":if("true"!==s.get("should-update-user-cache")){const t=new Response("Error updating user record",{status:404});return e.respondWith(t)}return fetch(e.request).then((async e=>{const t=e.clone(),s=(await t.json()).userDoc,n=new Response(JSON.stringify(s)),r=new Request("/get-user",{method:"GET"});caches.delete("user-doc").then((e=>e?(caches.open("user-doc").then((e=>{e.put(r,n)})),e):e))}));case"/cancel-mission":if("true"!==s.get("should-update-user-cache")){const t=new Response("Error updating user record",{status:404});return e.respondWith(t)}return fetch(e.request).then((async e=>{const t=e.clone(),s=(await t.json()).userDoc,n=new Response(JSON.stringify(s)),r=new Request("/get-user",{method:"GET"});caches.delete("user-doc").then((e=>e?(caches.open("user-doc").then((e=>{e.put(r,n)})),e):e))}));case"/handle-mission-stats/create-stats-doc":case"/handle-mission-stats/add-new-stats-doc":case"/handle-mission-stats/get-stats-doc":case"/handle-mission-stats/update-stats-doc":{const s=await fetch(e.request),n=s.clone(),r=(await n.json()).statsDoc;console.log(r);const o={missionId:"mars",goals:r};if(indexedDB){const e=indexedDB.open("missionStats",1);e.onsuccess=()=>{t=e.result;const s=t.transaction("missionStats","readwrite");s.oncomplete=()=>{console.log("Transaction complete")};const n=s.objectStore("missionStats").add(o);console.log(n)},e.onerror=()=>{},e.onupgradeneeded=()=>{t=e.result;t.createObjectStore("missionStats",{keyPath:"missionId"}).createIndex("missionId","missionId",{unique:!0})}}return s}default:return e.respondWith(fetch(e.request))}}))})()})();